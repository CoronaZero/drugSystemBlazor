@page "/PrescriptionQuery"
@rendermode InteractiveServer
@inject IJSRuntime JS
@using System.Linq
@using Microsoft.EntityFrameworkCore
@namespace drugSystemBlazor

<PageTitle>查询处方单</PageTitle>
<h3>查询处方单</h3>
<p><i>已连接到数据库:@db.DBpath</i></p>

<h4>查找处方单</h4>
<input type="text" placeholder="病人姓名" @bind="searchPatientName" />
<input type="number" placeholder="处方单ID" @bind="searchPrescriptionId" />
<button class="btn btn-primary" @onclick="SearchPrescription">查找</button>

@if (prescriptionList.Any())
{
    <h5>查找到的处方单</h5>
    <table class="table">
        <thead>
            <tr>
                <th>处方单ID</th>
                <th>病人姓名</th>
                <th>病人是否拿药</th>
                <th>处方总价</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prescription in prescriptionList)
            {
                <tr>
                    <td>@prescription.ID</td>
                    <td>@prescription.PatientName</td>
                    <td><input type="checkbox" @bind="prescription.IsPatientTakes" /></td>
                    <td>@CalculatePrescriptionTotal(prescription)</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => LoadPrescriptionDetails(prescription.ID)">查看详情</button>
                        <button class="btn btn-danger" @onclick="() => DeletePrescription(prescription)">删除处方单</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedPrescription != null)
{
    <h5>处方单详情</h5>
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>病人姓名</th>
                    <th>病人是否拿药</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@selectedPrescription.PatientName</td>
                    <td><input type="checkbox" @bind="selectedPrescription.IsPatientTakes" /></td>
                    <td><button class="btn btn-primary" @onclick="UpdatePrescription">更新拿药信息</button></td>
                </tr>
            </tbody>
        </table>
    </div>

    <h6>处方单药品列表</h6>
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>药品ID</th>
                    <th>药品名称</th>
                    <th>药品单价</th>
                    <th>药品库存</th>
                    <th>开药数量</th>
                    <th>总价</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var drug in selectedPrescription.Drugs.Select((value, index) => new { value, index }))
                {
                    <tr>
                        <td>@drug.value.DrugID</td>
                        <td>@drug.value.Drug.Name</td>
                        <td>@drug.value.Drug.Price</td>
                        <td>@drug.value.Drug.Quantity</td>
                        <td>
                            <input type="number" min="1" max="@drug.value.Drug.Quantity + drug.value.Quantity" value="@drug.value.Quantity" @onchange="(e) => UpdateDrugQuantity(drug.index, int.Parse(e.Value.ToString()))" />
                        </td>
                        <td>@CalculateDrugTotal(drug.value)</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => RemoveDrugFromPrescription(drug.index)">删除</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <h6>添加药品</h6>
    <div>
        <select class="form-select" @bind="selectedDrugId">
            <option value="">选择药品</option>
            @foreach (var drug in availableDrugs)
            {
                <option value="@drug.ID">@drug.Name</option>
            }
        </select>
        <input type="number" min="1" @bind="newDrugQuantity" placeholder="数量" />
        <button class="btn btn-primary" @onclick="AddDrugToPrescription">添加药品</button>
    </div>
}

@code {
    private DSDBcontext db = new(); // 连接到数据库
    private string searchPatientName = string.Empty;
    private int searchPrescriptionId;
    private List<Prescription> prescriptionList = new();
    private Prescription selectedPrescription;
    private List<Drug> availableDrugs = new();
    private int selectedDrugId;
    private int newDrugQuantity;

    private void SearchPrescription()
    {
        if (!string.IsNullOrWhiteSpace(searchPatientName))
        {
            prescriptionList = db.Prescriptions
                .Include(p => p.Drugs)
                .ThenInclude(pd => pd.Drug)
                .Where(p => p.PatientName.Contains(searchPatientName))
                .ToList();
        }
        else if (searchPrescriptionId > 0)
        {
            prescriptionList = db.Prescriptions
                .Include(p => p.Drugs)
                .ThenInclude(pd => pd.Drug)
                .Where(p => p.ID == searchPrescriptionId)
                .ToList();
        }
    }

    private void LoadPrescriptionDetails(int prescriptionId)
    {
        selectedPrescription = db.Prescriptions
            .Include(p => p.Drugs)
            .ThenInclude(pd => pd.Drug)
            .FirstOrDefault(p => p.ID == prescriptionId);

        LoadAvailableDrugs(); // 加载可用药品列表
    }

    private void UpdatePrescription()
    {
        db.SaveChanges();
        JS.InvokeVoidAsync("alert", "处方单已更新");
    }

    private void UpdateDrugQuantity(int index, int newQuantity)
    {
        var drugDetail = selectedPrescription.Drugs[index];
        var drug = db.Drugs.Find(drugDetail.DrugID);

        if (drug != null)
        {
            int originalQuantity = drugDetail.Quantity;
            int quantityDifference = newQuantity - originalQuantity;

            if (drug.Quantity + originalQuantity >= newQuantity)
            {
                drug.Quantity -= quantityDifference;
                drugDetail.Quantity = newQuantity;
                db.SaveChanges();
            }
            else
            {
                JS.InvokeVoidAsync("alert", "药品库存不足");
            }
        }
    }

    private void RemoveDrugFromPrescription(int index)
    {
        var drugDetail = selectedPrescription.Drugs[index];
        var drug = db.Drugs.Find(drugDetail.DrugID);

        if (drug != null)
        {
            drug.Quantity += drugDetail.Quantity; // 恢复库存
        }

        selectedPrescription.Drugs.RemoveAt(index);
        db.SaveChanges();
        JS.InvokeVoidAsync("alert", "药品已从处方中移除");
    }

    private void DeletePrescription(Prescription prescription)
    {
        db.Prescriptions.Remove(prescription);
        db.SaveChanges();
        prescriptionList.Remove(prescription);
        JS.InvokeVoidAsync("alert", "处方单已删除");
    }

    private void LoadAvailableDrugs()
    {
        availableDrugs = db.Drugs.ToList();
    }

    private void AddDrugToPrescription()
    {
        var drugToAdd = db.Drugs.Find(selectedDrugId);

        if (drugToAdd != null && newDrugQuantity > 0)
        {
            if (selectedPrescription.Drugs.Any(d => d.DrugID == drugToAdd.ID))
            {
                var existingDrug = selectedPrescription.Drugs.First(d => d.DrugID == drugToAdd.ID);
                existingDrug.Quantity += newDrugQuantity;
            }
            else
            {
                var newPrescriptionDrug = new PrescriptionDrugs
                    {
                        DrugID = drugToAdd.ID,
                        Drug = drugToAdd,
                        Quantity = newDrugQuantity
                    };
                selectedPrescription.Drugs.Add(newPrescriptionDrug);
            }

            db.SaveChanges();
            JS.InvokeVoidAsync("alert", "药品已添加到处方单");
        }
        else
        {
            JS.InvokeVoidAsync("alert", "请选择药品并输入有效数量");
        }
    }

    private float CalculatePrescriptionTotal(Prescription prescription)
    {
        if (prescription.Drugs != null && prescription.Drugs.Any())
        {
            float? sum = prescription.Drugs.Sum(d => d.Drug?.Price * d.Quantity);
            return sum.GetValueOrDefault();
        }
        return 0;
    }

    private float CalculateDrugTotal(PrescriptionDrugs drug)
    {
        if (drug != null && drug.Drug != null)
        {
            float? sum = drug.Drug.Price * drug.Quantity;
            return sum.GetValueOrDefault();
        }
        return 0;
    }

    protected override void OnInitialized()
    {
        db.Database.EnsureCreated(); // 确保数据库已创建
        prescriptionList = db.Prescriptions.OrderBy(p => p.ID).ToList();
    }
}
